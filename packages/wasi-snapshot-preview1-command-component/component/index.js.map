{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":"AAuDA,OAAO,EAAE,WAAW,IAAI,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAErE,MAAM,CAAC,KAAK,UAAU,WAAW,CAC7B,WAAwF,EACxF,OAAqB,EACrB,eAA6G;IAEzG,aAAa;IACb,OAAO,MAAM,oBAAoB,CAAC,WAAW,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;AACjF,CAAC;AAOD,MAAM,MAAM,GAAG,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;AAE3F,MAAM,CAAC,KAAK,UAAU,YAAY,CAAC,GAAQ;IACvC,IAAI,MAAM,EAAE;QACR,IAAI,GAAG,GAAG,MAAM,MAAM,CAAC,aAAa,CAAC,CAAC;QACtC,OAAO,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;KACvD;IACD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAAC,GAAW;IACzC,iDAAiD;IACjD;;;;;;;;;;;;OAYG;IACH,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC;IACjB,MAAM,OAAO,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9C,OAAO,MAAM,YAAY,CAAC,OAAO,CAAC,CAAC;AACvC,CAAC","sourcesContent":["\n\nimport { WasiCliEnvironment } from './interfaces/wasi-cli-environment';\nimport { WasiCliExit } from './interfaces/wasi-cli-exit';\nimport { WasiCliStderr } from './interfaces/wasi-cli-stderr';\nimport { WasiCliStdin } from './interfaces/wasi-cli-stdin';\nimport { WasiCliStdout } from './interfaces/wasi-cli-stdout';\nimport { WasiCliTerminalInput } from './interfaces/wasi-cli-terminal-input';\nimport { WasiCliTerminalOutput } from './interfaces/wasi-cli-terminal-output';\nimport { WasiCliTerminalStderr } from './interfaces/wasi-cli-terminal-stderr';\nimport { WasiCliTerminalStdin } from './interfaces/wasi-cli-terminal-stdin';\nimport { WasiCliTerminalStdout } from './interfaces/wasi-cli-terminal-stdout';\nimport { WasiClocksMonotonicClock } from './interfaces/wasi-clocks-monotonic-clock';\nimport { WasiClocksWallClock } from './interfaces/wasi-clocks-wall-clock';\nimport { WasiFilesystemPreopens } from './interfaces/wasi-filesystem-preopens';\nimport { WasiFilesystemTypes } from './interfaces/wasi-filesystem-types';\nimport { WasiIoStreams } from './interfaces/wasi-io-streams';\nimport { WasiPollPoll } from './interfaces/wasi-poll-poll';\nimport { WasiRandomRandom } from './interfaces/wasi-random-random';\nimport { WasiSocketsInstanceNetwork } from './interfaces/wasi-sockets-instance-network';\nimport { WasiSocketsIpNameLookup } from './interfaces/wasi-sockets-ip-name-lookup';\nimport { WasiSocketsNetwork } from './interfaces/wasi-sockets-network';\nimport { WasiSocketsTcp } from './interfaces/wasi-sockets-tcp';\nimport { WasiSocketsTcpCreateSocket } from './interfaces/wasi-sockets-tcp-create-socket';\nimport { WasiSocketsUdp } from './interfaces/wasi-sockets-udp';\nimport { WasiSocketsUdpCreateSocket } from './interfaces/wasi-sockets-udp-create-socket';\nimport { WasiCliRun } from './interfaces/wasi-cli-run';\nexport interface ImportObject {\n  'wasi:cli/environment': typeof WasiCliEnvironment,\n  'wasi:cli/exit': typeof WasiCliExit,\n  'wasi:cli/stderr': typeof WasiCliStderr,\n  'wasi:cli/stdin': typeof WasiCliStdin,\n  'wasi:cli/stdout': typeof WasiCliStdout,\n  'wasi:cli/terminal-input': typeof WasiCliTerminalInput,\n  'wasi:cli/terminal-output': typeof WasiCliTerminalOutput,\n  'wasi:cli/terminal-stderr': typeof WasiCliTerminalStderr,\n  'wasi:cli/terminal-stdin': typeof WasiCliTerminalStdin,\n  'wasi:cli/terminal-stdout': typeof WasiCliTerminalStdout,\n  'wasi:clocks/monotonic-clock': typeof WasiClocksMonotonicClock,\n  'wasi:clocks/wall-clock': typeof WasiClocksWallClock,\n  'wasi:filesystem/preopens': typeof WasiFilesystemPreopens,\n  'wasi:filesystem/types': typeof WasiFilesystemTypes,\n  'wasi:io/streams': typeof WasiIoStreams,\n  'wasi:poll/poll': typeof WasiPollPoll,\n  'wasi:random/random': typeof WasiRandomRandom,\n  'wasi:sockets/instance-network': typeof WasiSocketsInstanceNetwork,\n  'wasi:sockets/ip-name-lookup': typeof WasiSocketsIpNameLookup,\n  // @ts-ignore\n  //'wasi:sockets/network': typeof WasiSocketsNetwork,\n  'wasi:sockets/tcp': typeof WasiSocketsTcp,\n  'wasi:sockets/tcp-create-socket': typeof WasiSocketsTcpCreateSocket,\n  'wasi:sockets/udp': typeof WasiSocketsUdp,\n  'wasi:sockets/udp-create-socket': typeof WasiSocketsUdpCreateSocket,\n}\n\nimport { instantiate as componentInstantiate } from './component.js';\n\nexport async function instantiate(\n    compileCore: (path: string, imports: Record<string, any>) => Promise<WebAssembly.Module>,\n    imports: ImportObject,\n    instantiateCore?: (module: WebAssembly.Module, imports: Record<string, any>) => Promise<WebAssembly.Instance>\n    ): Promise<Root>{\n        // @ts-ignore\n        return await componentInstantiate(compileCore, imports, instantiateCore);\n}    \n\nexport interface Root {\n  'wasi:cli/run': typeof WasiCliRun,\n  run: typeof WasiCliRun,\n}\n\nconst isNode = typeof process !== \"undefined\" && process.versions && process.versions.node;\n\nexport async function fetchCompile(url: URL) {\n    if (isNode) {\n        let _fs = await import(\"fs/promises\");\n        return WebAssembly.compile(await _fs.readFile(url));\n    }\n    return fetch(url).then(WebAssembly.compileStreaming);\n}\n\nexport async function compileCore(url: string) {\n    // special case for main core module of component\n    /*if (url == \"component.core.wasm\") {\n        if (this.wasmModOrBufferSource) {\n            if (this.wasmModOrBufferSource instanceof WebAssembly.Module) {\n                return this.wasmModOrBufferSource as WebAssembly.Module;\n            } else {\n                const bufSource = this.wasmModOrBufferSource as BufferSource;\n                const mod = await WebAssembly.compile(bufSource);\n                return mod;\n            }\n        } else {\n            throw new Error(\"Wasm module source not set\");\n        }\n    }*/\n    url = \"./\" + url;\n    const metaUrl = new URL(url, import.meta.url);\n    return await fetchCompile(metaUrl);\n}"]}