{"version":3,"file":"sockets-udp.js","sourceRoot":"","sources":["../../src/imports/sockets-udp.ts"],"names":[],"mappings":"","sourcesContent":["export interface SocketsUdp {\n  /**\n   * Bind the socket to a specific network on the provided IP address and port.\n   * \n   * If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which\n   * network interface(s) to bind to.\n   * If the TCP/UDP port is zero, the socket will be bound to a random free port.\n   * \n   * When a socket is not explicitly bound, the first invocation to connect will implicitly bind the socket.\n   * \n   * Unlike in POSIX, this function is async. This enables interactive WASI hosts to inject permission prompts.\n   * \n   * # Typical `start` errors\n   * - `address-family-mismatch`:   The `local-address` has the wrong address family. (EINVAL)\n   * - `already-bound`:             The socket is already bound. (EINVAL)\n   * - `concurrency-conflict`:      Another `bind` or `connect` operation is already in progress. (EALREADY)\n   * \n   * # Typical `finish` errors\n   * - `ephemeral-ports-exhausted`: No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)\n   * - `address-in-use`:            Address is already in use. (EADDRINUSE)\n   * - `address-not-bindable`:      `local-address` is not an address that the `network` can bind to. (EADDRNOTAVAIL)\n   * - `not-in-progress`:           A `bind` operation is not in progress.\n   * - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>\n   * - <https://man7.org/linux/man-pages/man2/bind.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>\n   */\n   startBind(this0: UdpSocket, network: Network, localAddress: IpSocketAddress): void;\n   finishBind(this0: UdpSocket): void;\n  /**\n   * Set the destination address.\n   * \n   * The local-address is updated based on the best network path to `remote-address`.\n   * \n   * When a destination address is set:\n   * - all receive operations will only return datagrams sent from the provided `remote-address`.\n   * - the `send` function can only be used to send to this destination.\n   * \n   * Note that this function does not generate any network traffic and the peer is not aware of this \"connection\".\n   * \n   * Unlike in POSIX, this function is async. This enables interactive WASI hosts to inject permission prompts.\n   * \n   * # Typical `start` errors\n   * - `address-family-mismatch`:   The `remote-address` has the wrong address family. (EAFNOSUPPORT)\n   * - `invalid-remote-address`:    The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `invalid-remote-address`:    The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `already-attached`:          The socket is already bound to a different network. The `network` passed to `connect` must be identical to the one passed to `bind`.\n   * - `concurrency-conflict`:      Another `bind` or `connect` operation is already in progress. (EALREADY)\n   * \n   * # Typical `finish` errors\n   * - `ephemeral-ports-exhausted`: Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)\n   * - `not-in-progress`:           A `connect` operation is not in progress.\n   * - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>\n   * - <https://man7.org/linux/man-pages/man2/connect.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n   * - <https://man.freebsd.org/cgi/man.cgi?connect>\n   */\n   startConnect(this0: UdpSocket, network: Network, remoteAddress: IpSocketAddress): void;\n   finishConnect(this0: UdpSocket): void;\n  /**\n   * Receive a message.\n   * \n   * Returns:\n   * - The sender address of the datagram\n   * - The number of bytes read.\n   * \n   * # Typical errors\n   * - `not-bound`:          The socket is not bound to any local address. (EINVAL)\n   * - `remote-unreachable`: The remote address is not reachable. (ECONNREFUSED, ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN)\n   * - `would-block`:        There is no pending data available to be read at the moment. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html>\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html>\n   * - <https://man7.org/linux/man-pages/man2/recv.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recv>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recvfrom>\n   * - <https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms741687(v=vs.85)>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n   */\n   receive(this0: UdpSocket): Datagram;\n  /**\n   * Send a message to a specific destination address.\n   * \n   * The remote address option is required. To send a message to the \"connected\" peer,\n   * call `remote-address` to get their address.\n   * \n   * # Typical errors\n   * - `address-family-mismatch`: The `remote-address` has the wrong address family. (EAFNOSUPPORT)\n   * - `invalid-remote-address`:  The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `invalid-remote-address`:  The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `already-connected`:       The socket is in \"connected\" mode and the `datagram.remote-address` does not match the address passed to `connect`. (EISCONN)\n   * - `not-bound`:               The socket is not bound to any local address. Unlike POSIX, this function does not perform an implicit bind.\n   * - `remote-unreachable`:      The remote address is not reachable. (ECONNREFUSED, ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN)\n   * - `datagram-too-large`:      The datagram is too large. (EMSGSIZE)\n   * - `would-block`:             The send buffer is currently full. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html>\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html>\n   * - <https://man7.org/linux/man-pages/man2/send.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasendmsg>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n   */\n   send(this0: UdpSocket, datagram: Datagram): void;\n  /**\n   * Get the current bound address.\n   * \n   * # Typical errors\n   * - `not-bound`: The socket is not bound to any local address.\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>\n   * - <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>\n   * - <https://man.freebsd.org/cgi/man.cgi?getsockname>\n   */\n   localAddress(this0: UdpSocket): IpSocketAddress;\n  /**\n   * Get the address set with `connect`.\n   * \n   * # Typical errors\n   * - `not-connected`: The socket is not connected to a remote address. (ENOTCONN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>\n   * - <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>\n   */\n   remoteAddress(this0: UdpSocket): IpSocketAddress;\n  /**\n   * Whether this is a IPv4 or IPv6 socket.\n   * \n   * Equivalent to the SO_DOMAIN socket option.\n   */\n   addressFamily(this0: UdpSocket): IpAddressFamily;\n  /**\n   * Whether IPv4 compatibility (dual-stack) mode is disabled or not.\n   * \n   * Equivalent to the IPV6_V6ONLY socket option.\n   * \n   * # Typical errors\n   * - `ipv6-only-operation`:  (get/set) `this` socket is an IPv4 socket.\n   * - `already-bound`:        (set) The socket is already bound.\n   * - `not-supported`:        (set) Host does not support dual-stack sockets. (Implementations are not required to.)\n   * - `concurrency-conflict`: (set) Another `bind` or `connect` operation is already in progress. (EALREADY)\n   */\n   ipv6Only(this0: UdpSocket): boolean;\n   setIpv6Only(this0: UdpSocket, value: boolean): void;\n  /**\n   * Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.\n   * \n   * # Typical errors\n   * - `concurrency-conflict`: (set) Another `bind` or `connect` operation is already in progress. (EALREADY)\n   */\n   unicastHopLimit(this0: UdpSocket): number;\n   setUnicastHopLimit(this0: UdpSocket, value: number): void;\n  /**\n   * The kernel buffer space reserved for sends/receives on this socket.\n   * \n   * Note #1: an implementation may choose to cap or round the buffer size when setting the value.\n   * In other words, after setting a value, reading the same setting back may return a different value.\n   * \n   * Note #2: there is not necessarily a direct relationship between the kernel buffer size and the bytes of\n   * actual data to be sent/received by the application, because the kernel might also use the buffer space\n   * for internal metadata structures.\n   * \n   * Fails when this socket is in the Listening state.\n   * \n   * Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.\n   * \n   * # Typical errors\n   * - `concurrency-conflict`: (set) Another `bind` or `connect` operation is already in progress. (EALREADY)\n   */\n   receiveBufferSize(this0: UdpSocket): bigint;\n   setReceiveBufferSize(this0: UdpSocket, value: bigint): void;\n   sendBufferSize(this0: UdpSocket): bigint;\n   setSendBufferSize(this0: UdpSocket, value: bigint): void;\n  /**\n   * Create a `pollable` which will resolve once the socket is ready for I/O.\n   * \n   * Note: this function is here for WASI Preview2 only.\n   * It's planned to be removed when `future` is natively supported in Preview3.\n   */\n   subscribe(this0: UdpSocket): Pollable;\n  /**\n   * Dispose of the specified `udp-socket`, after which it may no longer be used.\n   * \n   * Note: this function is scheduled to be removed when Resources are natively supported in Wit.\n   */\n   dropUdpSocket(this0: UdpSocket): void;\n}\nexport interface SocketsUdpAsync {\n  /**\n   * Bind the socket to a specific network on the provided IP address and port.\n   * \n   * If the IP address is zero (`0.0.0.0` in IPv4, `::` in IPv6), it is left to the implementation to decide which\n   * network interface(s) to bind to.\n   * If the TCP/UDP port is zero, the socket will be bound to a random free port.\n   * \n   * When a socket is not explicitly bound, the first invocation to connect will implicitly bind the socket.\n   * \n   * Unlike in POSIX, this function is async. This enables interactive WASI hosts to inject permission prompts.\n   * \n   * # Typical `start` errors\n   * - `address-family-mismatch`:   The `local-address` has the wrong address family. (EINVAL)\n   * - `already-bound`:             The socket is already bound. (EINVAL)\n   * - `concurrency-conflict`:      Another `bind` or `connect` operation is already in progress. (EALREADY)\n   * \n   * # Typical `finish` errors\n   * - `ephemeral-ports-exhausted`: No ephemeral ports available. (EADDRINUSE, ENOBUFS on Windows)\n   * - `address-in-use`:            Address is already in use. (EADDRINUSE)\n   * - `address-not-bindable`:      `local-address` is not an address that the `network` can bind to. (EADDRNOTAVAIL)\n   * - `not-in-progress`:           A `bind` operation is not in progress.\n   * - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/bind.html>\n   * - <https://man7.org/linux/man-pages/man2/bind.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-bind>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=bind&sektion=2&format=html>\n   */\n   startBind(this0: UdpSocket, network: Network, localAddress: IpSocketAddress): Promise<void>;\n   finishBind(this0: UdpSocket): Promise<void>;\n  /**\n   * Set the destination address.\n   * \n   * The local-address is updated based on the best network path to `remote-address`.\n   * \n   * When a destination address is set:\n   * - all receive operations will only return datagrams sent from the provided `remote-address`.\n   * - the `send` function can only be used to send to this destination.\n   * \n   * Note that this function does not generate any network traffic and the peer is not aware of this \"connection\".\n   * \n   * Unlike in POSIX, this function is async. This enables interactive WASI hosts to inject permission prompts.\n   * \n   * # Typical `start` errors\n   * - `address-family-mismatch`:   The `remote-address` has the wrong address family. (EAFNOSUPPORT)\n   * - `invalid-remote-address`:    The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `invalid-remote-address`:    The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `already-attached`:          The socket is already bound to a different network. The `network` passed to `connect` must be identical to the one passed to `bind`.\n   * - `concurrency-conflict`:      Another `bind` or `connect` operation is already in progress. (EALREADY)\n   * \n   * # Typical `finish` errors\n   * - `ephemeral-ports-exhausted`: Tried to perform an implicit bind, but there were no ephemeral ports available. (EADDRINUSE, EADDRNOTAVAIL on Linux, EAGAIN on BSD)\n   * - `not-in-progress`:           A `connect` operation is not in progress.\n   * - `would-block`:               Can't finish the operation, it is still in progress. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/connect.html>\n   * - <https://man7.org/linux/man-pages/man2/connect.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-connect>\n   * - <https://man.freebsd.org/cgi/man.cgi?connect>\n   */\n   startConnect(this0: UdpSocket, network: Network, remoteAddress: IpSocketAddress): Promise<void>;\n   finishConnect(this0: UdpSocket): Promise<void>;\n  /**\n   * Receive a message.\n   * \n   * Returns:\n   * - The sender address of the datagram\n   * - The number of bytes read.\n   * \n   * # Typical errors\n   * - `not-bound`:          The socket is not bound to any local address. (EINVAL)\n   * - `remote-unreachable`: The remote address is not reachable. (ECONNREFUSED, ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN)\n   * - `would-block`:        There is no pending data available to be read at the moment. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvfrom.html>\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/recvmsg.html>\n   * - <https://man7.org/linux/man-pages/man2/recv.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recv>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-recvfrom>\n   * - <https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms741687(v=vs.85)>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=recv&sektion=2>\n   */\n   receive(this0: UdpSocket): Promise<Datagram>;\n  /**\n   * Send a message to a specific destination address.\n   * \n   * The remote address option is required. To send a message to the \"connected\" peer,\n   * call `remote-address` to get their address.\n   * \n   * # Typical errors\n   * - `address-family-mismatch`: The `remote-address` has the wrong address family. (EAFNOSUPPORT)\n   * - `invalid-remote-address`:  The IP address in `remote-address` is set to INADDR_ANY (`0.0.0.0` / `::`). (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `invalid-remote-address`:  The port in `remote-address` is set to 0. (EDESTADDRREQ, EADDRNOTAVAIL)\n   * - `already-connected`:       The socket is in \"connected\" mode and the `datagram.remote-address` does not match the address passed to `connect`. (EISCONN)\n   * - `not-bound`:               The socket is not bound to any local address. Unlike POSIX, this function does not perform an implicit bind.\n   * - `remote-unreachable`:      The remote address is not reachable. (ECONNREFUSED, ECONNRESET, ENETRESET on Windows, EHOSTUNREACH, EHOSTDOWN, ENETUNREACH, ENETDOWN)\n   * - `datagram-too-large`:      The datagram is too large. (EMSGSIZE)\n   * - `would-block`:             The send buffer is currently full. (EWOULDBLOCK, EAGAIN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendto.html>\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/sendmsg.html>\n   * - <https://man7.org/linux/man-pages/man2/send.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-send>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-sendto>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock2/nf-winsock2-wsasendmsg>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=send&sektion=2>\n   */\n   send(this0: UdpSocket, datagram: Datagram): Promise<void>;\n  /**\n   * Get the current bound address.\n   * \n   * # Typical errors\n   * - `not-bound`: The socket is not bound to any local address.\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getsockname.html>\n   * - <https://man7.org/linux/man-pages/man2/getsockname.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getsockname>\n   * - <https://man.freebsd.org/cgi/man.cgi?getsockname>\n   */\n   localAddress(this0: UdpSocket): Promise<IpSocketAddress>;\n  /**\n   * Get the address set with `connect`.\n   * \n   * # Typical errors\n   * - `not-connected`: The socket is not connected to a remote address. (ENOTCONN)\n   * \n   * # References\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getpeername.html>\n   * - <https://man7.org/linux/man-pages/man2/getpeername.2.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/winsock/nf-winsock-getpeername>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=getpeername&sektion=2&n=1>\n   */\n   remoteAddress(this0: UdpSocket): Promise<IpSocketAddress>;\n  /**\n   * Whether this is a IPv4 or IPv6 socket.\n   * \n   * Equivalent to the SO_DOMAIN socket option.\n   */\n   addressFamily(this0: UdpSocket): Promise<IpAddressFamily>;\n  /**\n   * Whether IPv4 compatibility (dual-stack) mode is disabled or not.\n   * \n   * Equivalent to the IPV6_V6ONLY socket option.\n   * \n   * # Typical errors\n   * - `ipv6-only-operation`:  (get/set) `this` socket is an IPv4 socket.\n   * - `already-bound`:        (set) The socket is already bound.\n   * - `not-supported`:        (set) Host does not support dual-stack sockets. (Implementations are not required to.)\n   * - `concurrency-conflict`: (set) Another `bind` or `connect` operation is already in progress. (EALREADY)\n   */\n   ipv6Only(this0: UdpSocket): Promise<boolean>;\n   setIpv6Only(this0: UdpSocket, value: boolean): Promise<void>;\n  /**\n   * Equivalent to the IP_TTL & IPV6_UNICAST_HOPS socket options.\n   * \n   * # Typical errors\n   * - `concurrency-conflict`: (set) Another `bind` or `connect` operation is already in progress. (EALREADY)\n   */\n   unicastHopLimit(this0: UdpSocket): Promise<number>;\n   setUnicastHopLimit(this0: UdpSocket, value: number): Promise<void>;\n  /**\n   * The kernel buffer space reserved for sends/receives on this socket.\n   * \n   * Note #1: an implementation may choose to cap or round the buffer size when setting the value.\n   * In other words, after setting a value, reading the same setting back may return a different value.\n   * \n   * Note #2: there is not necessarily a direct relationship between the kernel buffer size and the bytes of\n   * actual data to be sent/received by the application, because the kernel might also use the buffer space\n   * for internal metadata structures.\n   * \n   * Fails when this socket is in the Listening state.\n   * \n   * Equivalent to the SO_RCVBUF and SO_SNDBUF socket options.\n   * \n   * # Typical errors\n   * - `concurrency-conflict`: (set) Another `bind` or `connect` operation is already in progress. (EALREADY)\n   */\n   receiveBufferSize(this0: UdpSocket): Promise<bigint>;\n   setReceiveBufferSize(this0: UdpSocket, value: bigint): Promise<void>;\n   sendBufferSize(this0: UdpSocket): Promise<bigint>;\n   setSendBufferSize(this0: UdpSocket, value: bigint): Promise<void>;\n  /**\n   * Create a `pollable` which will resolve once the socket is ready for I/O.\n   * \n   * Note: this function is here for WASI Preview2 only.\n   * It's planned to be removed when `future` is natively supported in Preview3.\n   */\n   subscribe(this0: UdpSocket): Promise<Pollable>;\n  /**\n   * Dispose of the specified `udp-socket`, after which it may no longer be used.\n   * \n   * Note: this function is scheduled to be removed when Resources are natively supported in Wit.\n   */\n   dropUdpSocket(this0: UdpSocket): Promise<void>;\n}\nimport type { Pollable } from '../imports/poll-poll';\nexport { Pollable };\nimport type { Network } from '../imports/sockets-network';\nexport { Network };\nimport type { ErrorCode } from '../imports/sockets-network';\nexport { ErrorCode };\nimport type { IpSocketAddress } from '../imports/sockets-network';\nexport { IpSocketAddress };\nimport type { IpAddressFamily } from '../imports/sockets-network';\nexport { IpAddressFamily };\n/**\n * A UDP socket handle.\n */\nexport type UdpSocket = number;\nexport interface Datagram {\n  data: Uint8Array,\n  remoteAddress: IpSocketAddress,\n}\n"]}