{"version":3,"file":"random-random.js","sourceRoot":"","sources":["../../src/imports/random-random.ts"],"names":[],"mappings":"","sourcesContent":["export interface RandomRandom {\n  /**\n   * Return `len` cryptographically-secure pseudo-random bytes.\n   * \n   * This function must produce data from an adequately seeded\n   * cryptographically-secure pseudo-random number generator (CSPRNG), so it\n   * must not block, from the perspective of the calling program, and the\n   * returned data is always unpredictable.\n   * \n   * This function must always return fresh pseudo-random data. Deterministic\n   * environments must omit this function, rather than implementing it with\n   * deterministic data.\n   */\n   getRandomBytes(len: bigint): Uint8Array | ArrayBuffer;\n  /**\n   * Return a cryptographically-secure pseudo-random `u64` value.\n   * \n   * This function returns the same type of pseudo-random data as\n   * `get-random-bytes`, represented as a `u64`.\n   */\n   getRandomU64(): bigint;\n}\nexport interface RandomRandomAsync {\n  /**\n   * Return `len` cryptographically-secure pseudo-random bytes.\n   * \n   * This function must produce data from an adequately seeded\n   * cryptographically-secure pseudo-random number generator (CSPRNG), so it\n   * must not block, from the perspective of the calling program, and the\n   * returned data is always unpredictable.\n   * \n   * This function must always return fresh pseudo-random data. Deterministic\n   * environments must omit this function, rather than implementing it with\n   * deterministic data.\n   */\n   getRandomBytes(len: bigint): Promise<Uint8Array | ArrayBuffer>;\n  /**\n   * Return a cryptographically-secure pseudo-random `u64` value.\n   * \n   * This function returns the same type of pseudo-random data as\n   * `get-random-bytes`, represented as a `u64`.\n   */\n   getRandomU64(): Promise<bigint>;\n}\n"]}