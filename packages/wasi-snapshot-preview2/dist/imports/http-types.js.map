{"version":3,"file":"http-types.js","sourceRoot":"","sources":["../../src/imports/http-types.ts"],"names":[],"mappings":"","sourcesContent":["export interface HttpTypes {\n   dropFields(fields: Fields): void;\n   newFields(entries: [string, string][]): Fields;\n   fieldsGet(fields: Fields, name: string): string[];\n   fieldsSet(fields: Fields, name: string, value: string[]): void;\n   fieldsDelete(fields: Fields, name: string): void;\n   fieldsAppend(fields: Fields, name: string, value: string): void;\n   fieldsEntries(fields: Fields): [string, string][];\n   fieldsClone(fields: Fields): Fields;\n   finishIncomingStream(s: IncomingStream): Trailers | null;\n   finishOutgoingStream(s: OutgoingStream, trailers: Trailers | null): void;\n   dropIncomingRequest(request: IncomingRequest): void;\n   dropOutgoingRequest(request: OutgoingRequest): void;\n   incomingRequestMethod(request: IncomingRequest): Method;\n   incomingRequestPath(request: IncomingRequest): string;\n   incomingRequestQuery(request: IncomingRequest): string;\n   incomingRequestScheme(request: IncomingRequest): Scheme | null;\n   incomingRequestAuthority(request: IncomingRequest): string;\n   incomingRequestHeaders(request: IncomingRequest): Headers;\n   incomingRequestConsume(request: IncomingRequest): IncomingStream;\n   newOutgoingRequest(method: Method, path: string, query: string, scheme: Scheme | null, authority: string, headers: Headers): OutgoingRequest;\n   outgoingRequestWrite(request: OutgoingRequest): OutgoingStream;\n   dropResponseOutparam(response: ResponseOutparam): void;\n   setResponseOutparam(response: Result<OutgoingResponse, Error>): void;\n   dropIncomingResponse(response: IncomingResponse): void;\n   dropOutgoingResponse(response: OutgoingResponse): void;\n   incomingResponseStatus(response: IncomingResponse): StatusCode;\n   incomingResponseHeaders(response: IncomingResponse): Headers;\n   incomingResponseConsume(response: IncomingResponse): IncomingStream;\n   newOutgoingResponse(statusCode: StatusCode, headers: Headers): OutgoingResponse;\n   outgoingResponseWrite(response: OutgoingResponse): OutgoingStream;\n   dropFutureIncomingResponse(f: FutureIncomingResponse): void;\n   futureIncomingResponseGet(f: FutureIncomingResponse): Result<IncomingResponse, Error> | null;\n   listenToFutureIncomingResponse(f: FutureIncomingResponse): Pollable;\n}\nexport interface HttpTypesAsync {\n   dropFields(fields: Fields): Promise<void>;\n   newFields(entries: [string, string][]): Promise<Fields>;\n   fieldsGet(fields: Fields, name: string): Promise<string[]>;\n   fieldsSet(fields: Fields, name: string, value: string[]): Promise<void>;\n   fieldsDelete(fields: Fields, name: string): Promise<void>;\n   fieldsAppend(fields: Fields, name: string, value: string): Promise<void>;\n   fieldsEntries(fields: Fields): Promise<[string, string][]>;\n   fieldsClone(fields: Fields): Promise<Fields>;\n   finishIncomingStream(s: IncomingStream): Promise<Trailers | null>;\n   finishOutgoingStream(s: OutgoingStream, trailers: Trailers | null): Promise<void>;\n   dropIncomingRequest(request: IncomingRequest): Promise<void>;\n   dropOutgoingRequest(request: OutgoingRequest): Promise<void>;\n   incomingRequestMethod(request: IncomingRequest): Promise<Method>;\n   incomingRequestPath(request: IncomingRequest): Promise<string>;\n   incomingRequestQuery(request: IncomingRequest): Promise<string>;\n   incomingRequestScheme(request: IncomingRequest): Promise<Scheme | null>;\n   incomingRequestAuthority(request: IncomingRequest): Promise<string>;\n   incomingRequestHeaders(request: IncomingRequest): Promise<Headers>;\n   incomingRequestConsume(request: IncomingRequest): Promise<IncomingStream>;\n   newOutgoingRequest(method: Method, path: string, query: string, scheme: Scheme | null, authority: string, headers: Headers): Promise<OutgoingRequest>;\n   outgoingRequestWrite(request: OutgoingRequest): Promise<OutgoingStream>;\n   dropResponseOutparam(response: ResponseOutparam): Promise<void>;\n   setResponseOutparam(response: Result<OutgoingResponse, Error>): Promise<void>;\n   dropIncomingResponse(response: IncomingResponse): Promise<void>;\n   dropOutgoingResponse(response: OutgoingResponse): Promise<void>;\n   incomingResponseStatus(response: IncomingResponse): Promise<StatusCode>;\n   incomingResponseHeaders(response: IncomingResponse): Promise<Headers>;\n   incomingResponseConsume(response: IncomingResponse): Promise<IncomingStream>;\n   newOutgoingResponse(statusCode: StatusCode, headers: Headers): Promise<OutgoingResponse>;\n   outgoingResponseWrite(response: OutgoingResponse): Promise<OutgoingStream>;\n   dropFutureIncomingResponse(f: FutureIncomingResponse): Promise<void>;\n   futureIncomingResponseGet(f: FutureIncomingResponse): Promise<Result<IncomingResponse, Error> | null>;\n   listenToFutureIncomingResponse(f: FutureIncomingResponse): Promise<Pollable>;\n}\nimport type { InputStream } from '../imports/io-streams';\nexport { InputStream };\nimport type { OutputStream } from '../imports/io-streams';\nexport { OutputStream };\nimport type { Pollable } from '../imports/poll-poll';\nexport { Pollable };\nexport type StatusCode = number;\nexport type Scheme = SchemeHttp | SchemeHttps | SchemeOther;\nexport interface SchemeHttp {\n  tag: 'HTTP',\n}\nexport interface SchemeHttps {\n  tag: 'HTTPS',\n}\nexport interface SchemeOther {\n  tag: 'other',\n  val: string,\n}\nexport type ResponseOutparam = number;\nexport interface RequestOptions {\n  connectTimeoutMs?: number,\n  firstByteTimeoutMs?: number,\n  betweenBytesTimeoutMs?: number,\n}\nexport type OutgoingStream = OutputStream;\nexport type OutgoingResponse = number;\nexport type OutgoingRequest = number;\nexport type Method = MethodGet | MethodHead | MethodPost | MethodPut | MethodDelete | MethodConnect | MethodOptions | MethodTrace | MethodPatch | MethodOther;\nexport interface MethodGet {\n  tag: 'get',\n}\nexport interface MethodHead {\n  tag: 'head',\n}\nexport interface MethodPost {\n  tag: 'post',\n}\nexport interface MethodPut {\n  tag: 'put',\n}\nexport interface MethodDelete {\n  tag: 'delete',\n}\nexport interface MethodConnect {\n  tag: 'connect',\n}\nexport interface MethodOptions {\n  tag: 'options',\n}\nexport interface MethodTrace {\n  tag: 'trace',\n}\nexport interface MethodPatch {\n  tag: 'patch',\n}\nexport interface MethodOther {\n  tag: 'other',\n  val: string,\n}\nexport type IncomingStream = InputStream;\nexport type IncomingResponse = number;\nexport type IncomingRequest = number;\nexport type FutureIncomingResponse = number;\nexport type Fields = number;\nexport type Trailers = Fields;\nexport type Headers = Fields;\nexport type Error = ErrorInvalidUrl | ErrorTimeoutError | ErrorProtocolError | ErrorUnexpectedError;\nexport interface ErrorInvalidUrl {\n  tag: 'invalid-url',\n  val: string,\n}\nexport interface ErrorTimeoutError {\n  tag: 'timeout-error',\n  val: string,\n}\nexport interface ErrorProtocolError {\n  tag: 'protocol-error',\n  val: string,\n}\nexport interface ErrorUnexpectedError {\n  tag: 'unexpected-error',\n  val: string,\n}\nexport type Result<T, E> = { tag: 'ok', val: T } | { tag: 'err', val: E };\n"]}