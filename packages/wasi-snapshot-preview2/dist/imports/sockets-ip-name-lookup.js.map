{"version":3,"file":"sockets-ip-name-lookup.js","sourceRoot":"","sources":["../../src/imports/sockets-ip-name-lookup.ts"],"names":[],"mappings":"","sourcesContent":["export interface SocketsIpNameLookup {\n  /**\n   * Resolve an internet host name to a list of IP addresses.\n   * \n   * See the wasi-socket proposal README.md for a comparison with getaddrinfo.\n   * \n   * # Parameters\n   * - `name`: The name to look up. IP addresses are not allowed. Unicode domain names are automatically converted\n   * to ASCII using IDNA encoding.\n   * - `address-family`: If provided, limit the results to addresses of this specific address family.\n   * - `include-unavailable`: When set to true, this function will also return addresses of which the runtime\n   * thinks (or knows) can't be connected to at the moment. For example, this will return IPv6 addresses on\n   * systems without an active IPv6 interface. Notes:\n   * - Even when no public IPv6 interfaces are present or active, names like \"localhost\" can still resolve to an IPv6 address.\n   * - Whatever is \"available\" or \"unavailable\" is volatile and can change everytime a network cable is unplugged.\n   * \n   * This function never blocks. It either immediately fails or immediately returns successfully with a `resolve-address-stream`\n   * that can be used to (asynchronously) fetch the results.\n   * \n   * At the moment, the stream never completes successfully with 0 items. Ie. the first call\n   * to `resolve-next-address` never returns `ok(none)`. This may change in the future.\n   * \n   * # Typical errors\n   * - `invalid-name`:                 `name` is a syntactically invalid domain name.\n   * - `invalid-name`:                 `name` is an IP address.\n   * - `address-family-not-supported`: The specified `address-family` is not supported. (EAI_FAMILY)\n   * \n   * # References:\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>\n   * - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=getaddrinfo&sektion=3>\n   */\n   resolveAddresses(network: Network, name: string, addressFamily: IpAddressFamily | null, includeUnavailable: boolean): ResolveAddressStream;\n  /**\n   * Returns the next address from the resolver.\n   * \n   * This function should be called multiple times. On each call, it will\n   * return the next address in connection order preference. If all\n   * addresses have been exhausted, this function returns `none`.\n   * After which, you should release the stream with `drop-resolve-address-stream`.\n   * \n   * This function never returns IPv4-mapped IPv6 addresses.\n   * \n   * # Typical errors\n   * - `name-unresolvable`:          Name does not exist or has no suitable associated IP addresses. (EAI_NONAME, EAI_NODATA, EAI_ADDRFAMILY)\n   * - `temporary-resolver-failure`: A temporary failure in name resolution occurred. (EAI_AGAIN)\n   * - `permanent-resolver-failure`: A permanent failure in name resolution occurred. (EAI_FAIL)\n   * - `would-block`:                A result is not available yet. (EWOULDBLOCK, EAGAIN)\n   */\n   resolveNextAddress(this0: ResolveAddressStream): IpAddress | null;\n  /**\n   * Dispose of the specified `resolve-address-stream`, after which it may no longer be used.\n   * \n   * Note: this function is scheduled to be removed when Resources are natively supported in Wit.\n   */\n   dropResolveAddressStream(this0: ResolveAddressStream): void;\n  /**\n   * Create a `pollable` which will resolve once the stream is ready for I/O.\n   * \n   * Note: this function is here for WASI Preview2 only.\n   * It's planned to be removed when `future` is natively supported in Preview3.\n   */\n   subscribe(this0: ResolveAddressStream): Pollable;\n}\nexport interface SocketsIpNameLookupAsync {\n  /**\n   * Resolve an internet host name to a list of IP addresses.\n   * \n   * See the wasi-socket proposal README.md for a comparison with getaddrinfo.\n   * \n   * # Parameters\n   * - `name`: The name to look up. IP addresses are not allowed. Unicode domain names are automatically converted\n   * to ASCII using IDNA encoding.\n   * - `address-family`: If provided, limit the results to addresses of this specific address family.\n   * - `include-unavailable`: When set to true, this function will also return addresses of which the runtime\n   * thinks (or knows) can't be connected to at the moment. For example, this will return IPv6 addresses on\n   * systems without an active IPv6 interface. Notes:\n   * - Even when no public IPv6 interfaces are present or active, names like \"localhost\" can still resolve to an IPv6 address.\n   * - Whatever is \"available\" or \"unavailable\" is volatile and can change everytime a network cable is unplugged.\n   * \n   * This function never blocks. It either immediately fails or immediately returns successfully with a `resolve-address-stream`\n   * that can be used to (asynchronously) fetch the results.\n   * \n   * At the moment, the stream never completes successfully with 0 items. Ie. the first call\n   * to `resolve-next-address` never returns `ok(none)`. This may change in the future.\n   * \n   * # Typical errors\n   * - `invalid-name`:                 `name` is a syntactically invalid domain name.\n   * - `invalid-name`:                 `name` is an IP address.\n   * - `address-family-not-supported`: The specified `address-family` is not supported. (EAI_FAMILY)\n   * \n   * # References:\n   * - <https://pubs.opengroup.org/onlinepubs/9699919799/functions/getaddrinfo.html>\n   * - <https://man7.org/linux/man-pages/man3/getaddrinfo.3.html>\n   * - <https://learn.microsoft.com/en-us/windows/win32/api/ws2tcpip/nf-ws2tcpip-getaddrinfo>\n   * - <https://man.freebsd.org/cgi/man.cgi?query=getaddrinfo&sektion=3>\n   */\n   resolveAddresses(network: Network, name: string, addressFamily: IpAddressFamily | null, includeUnavailable: boolean): Promise<ResolveAddressStream>;\n  /**\n   * Returns the next address from the resolver.\n   * \n   * This function should be called multiple times. On each call, it will\n   * return the next address in connection order preference. If all\n   * addresses have been exhausted, this function returns `none`.\n   * After which, you should release the stream with `drop-resolve-address-stream`.\n   * \n   * This function never returns IPv4-mapped IPv6 addresses.\n   * \n   * # Typical errors\n   * - `name-unresolvable`:          Name does not exist or has no suitable associated IP addresses. (EAI_NONAME, EAI_NODATA, EAI_ADDRFAMILY)\n   * - `temporary-resolver-failure`: A temporary failure in name resolution occurred. (EAI_AGAIN)\n   * - `permanent-resolver-failure`: A permanent failure in name resolution occurred. (EAI_FAIL)\n   * - `would-block`:                A result is not available yet. (EWOULDBLOCK, EAGAIN)\n   */\n   resolveNextAddress(this0: ResolveAddressStream): Promise<IpAddress | null>;\n  /**\n   * Dispose of the specified `resolve-address-stream`, after which it may no longer be used.\n   * \n   * Note: this function is scheduled to be removed when Resources are natively supported in Wit.\n   */\n   dropResolveAddressStream(this0: ResolveAddressStream): Promise<void>;\n  /**\n   * Create a `pollable` which will resolve once the stream is ready for I/O.\n   * \n   * Note: this function is here for WASI Preview2 only.\n   * It's planned to be removed when `future` is natively supported in Preview3.\n   */\n   subscribe(this0: ResolveAddressStream): Promise<Pollable>;\n}\nimport type { Pollable } from '../imports/poll-poll';\nexport { Pollable };\nimport type { Network } from '../imports/sockets-network';\nexport { Network };\nimport type { ErrorCode } from '../imports/sockets-network';\nexport { ErrorCode };\nimport type { IpAddress } from '../imports/sockets-network';\nexport { IpAddress };\nimport type { IpAddressFamily } from '../imports/sockets-network';\nexport { IpAddressFamily };\nexport type ResolveAddressStream = number;\n"]}