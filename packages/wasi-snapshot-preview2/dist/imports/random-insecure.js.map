{"version":3,"file":"random-insecure.js","sourceRoot":"","sources":["../../src/imports/random-insecure.ts"],"names":[],"mappings":"","sourcesContent":["export interface RandomInsecure {\n  /**\n   * Return `len` insecure pseudo-random bytes.\n   * \n   * This function is not cryptographically secure. Do not use it for\n   * anything related to security.\n   * \n   * There are no requirements on the values of the returned bytes, however\n   * implementations are encouraged to return evenly distributed values with\n   * a long period.\n   */\n   getInsecureRandomBytes(len: bigint): Uint8Array | ArrayBuffer;\n  /**\n   * Return an insecure pseudo-random `u64` value.\n   * \n   * This function returns the same type of pseudo-random data as\n   * `get-insecure-random-bytes`, represented as a `u64`.\n   */\n   getInsecureRandomU64(): bigint;\n}\nexport interface RandomInsecureAsync {\n  /**\n   * Return `len` insecure pseudo-random bytes.\n   * \n   * This function is not cryptographically secure. Do not use it for\n   * anything related to security.\n   * \n   * There are no requirements on the values of the returned bytes, however\n   * implementations are encouraged to return evenly distributed values with\n   * a long period.\n   */\n   getInsecureRandomBytes(len: bigint): Promise<Uint8Array | ArrayBuffer>;\n  /**\n   * Return an insecure pseudo-random `u64` value.\n   * \n   * This function returns the same type of pseudo-random data as\n   * `get-insecure-random-bytes`, represented as a `u64`.\n   */\n   getInsecureRandomU64(): Promise<bigint>;\n}\n"]}