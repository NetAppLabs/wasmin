{"version":3,"file":"clocks-monotonic-clock.js","sourceRoot":"","sources":["../../src/imports/clocks-monotonic-clock.ts"],"names":[],"mappings":"","sourcesContent":["export interface ClocksMonotonicClock {\n  /**\n   * Read the current value of the clock.\n   * \n   * The clock is monotonic, therefore calling this function repeatedly will\n   * produce a sequence of non-decreasing values.\n   */\n   now(): Instant;\n  /**\n   * Query the resolution of the clock.\n   */\n   resolution(): Instant;\n  /**\n   * Create a `pollable` which will resolve once the specified time has been\n   * reached.\n   */\n   subscribe(when: Instant, absolute: boolean): Pollable;\n}\nexport interface ClocksMonotonicClockAsync {\n  /**\n   * Read the current value of the clock.\n   * \n   * The clock is monotonic, therefore calling this function repeatedly will\n   * produce a sequence of non-decreasing values.\n   */\n   now(): Promise<Instant>;\n  /**\n   * Query the resolution of the clock.\n   */\n   resolution(): Promise<Instant>;\n  /**\n   * Create a `pollable` which will resolve once the specified time has been\n   * reached.\n   */\n   subscribe(when: Instant, absolute: boolean): Promise<Pollable>;\n}\nimport type { Pollable } from '../imports/poll-poll';\nexport { Pollable };\n/**\n * A timestamp in nanoseconds.\n */\nexport type Instant = bigint;\n"]}